// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.1.3

package users

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type UsersHTTPServer interface {
	GetCode(context.Context, *GetCodeReq) (*Rep, error)
	Login(context.Context, *LoginReq) (*Rep, error)
}

func RegisterUsersHTTPServer(s *http.Server, srv UsersHTTPServer) {
	r := s.Route("/")
	r.POST("/login", _Users_Login0_HTTP_Handler(srv))
	r.GET("/code", _Users_GetCode0_HTTP_Handler(srv))
}

func _Users_Login0_HTTP_Handler(srv UsersHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LoginReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.users.v1.Users/Login")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Login(ctx, req.(*LoginReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Rep)
		return ctx.Result(200, reply)
	}
}

func _Users_GetCode0_HTTP_Handler(srv UsersHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetCodeReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.users.v1.Users/GetCode")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCode(ctx, req.(*GetCodeReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Rep)
		return ctx.Result(200, reply)
	}
}

type UsersHTTPClient interface {
	GetCode(ctx context.Context, req *GetCodeReq, opts ...http.CallOption) (rsp *Rep, err error)
	Login(ctx context.Context, req *LoginReq, opts ...http.CallOption) (rsp *Rep, err error)
}

type UsersHTTPClientImpl struct {
	cc *http.Client
}

func NewUsersHTTPClient(client *http.Client) UsersHTTPClient {
	return &UsersHTTPClientImpl{client}
}

func (c *UsersHTTPClientImpl) GetCode(ctx context.Context, in *GetCodeReq, opts ...http.CallOption) (*Rep, error) {
	var out Rep
	pattern := "/code"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.users.v1.Users/GetCode"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UsersHTTPClientImpl) Login(ctx context.Context, in *LoginReq, opts ...http.CallOption) (*Rep, error) {
	var out Rep
	pattern := "/login"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.users.v1.Users/Login"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
